@model IEnumerable<IncomeVsExpense>
@{
    ViewData["Title"] = "Income vs Expenses";
    var totalIncome = Model.Sum(x => x.TotalIncome);
    var totalExpenses = Model.Sum(x => x.TotalExpenses);
    var netAmount = totalIncome - totalExpenses;
}

<div class="card">
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">
                <i class="fas fa-balance-scale"></i> Income vs Expenses
            </h5>
            <div class="d-flex gap-2">
                <select id="timeRangeSelect" class="form-select form-select-sm">
                    <option value="3">Last 3 Months</option>
                    <option value="6" selected>Last 6 Months</option>
                    <option value="12">Last 12 Months</option>
                    <option value="24">Last 2 Years</option>
                </select>
            </div>
        </div>
    </div>
    <div class="card-body">
        <!-- Summary Cards -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card bg-primary text-white">
                    <div class="card-body">
                        <h6 class="card-title">Total Income</h6>
                        <h4 class="card-text">@totalIncome.ToString("C0")</h4>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-danger text-white">
                    <div class="card-body">
                        <h6 class="card-title">Total Expenses</h6>
                        <h4 class="card-text">@totalExpenses.ToString("C0")</h4>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card @(netAmount >= 0 ? "bg-success" : "bg-danger") text-white">
                    <div class="card-body">
                        <h6 class="card-title">Net Amount</h6>
                        <h4 class="card-text">@netAmount.ToString("C0")</h4>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card bg-info text-white">
                    <div class="card-body">
                        <h6 class="card-title">Savings Rate</h6>
                        <h4 class="card-text">
                            @(totalIncome > 0 ? ((netAmount / totalIncome) * 100).ToString("F1") : "0")%
                        </h4>
                    </div>
                </div>
            </div>
        </div>

        <!-- Charts -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-body">
                        <canvas id="trendChart" height="300"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <canvas id="pieChart" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Monthly Breakdown Table -->
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Period</th>
                        <th class="text-end">Income</th>
                        <th class="text-end">Expenses</th>
                        <th class="text-end">Net Amount</th>
                        <th class="text-end">Savings Rate</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.OrderByDescending(x => x.Year).ThenByDescending(x => x.Month))
                    {
                        var monthYear = new DateTime(item.Year, item.Month, 1).ToString("MMMM yyyy");
                        var savingsRate = item.TotalIncome > 0
                        ? ((item.NetAmount / item.TotalIncome) * 100)
                        : 0;

                        <tr>
                            <td>@monthYear</td>
                            <td class="text-end">@item.TotalIncome.ToString("C0")</td>
                            <td class="text-end">@item.TotalExpenses.ToString("C0")</td>
                            <td class="text-end @(item.NetAmount >= 0 ? "text-success" : "text-danger")">
                                @item.NetAmount.ToString("C0")
                            </td>
                            <td class="text-end">@savingsRate.ToString("F1")%</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        $(document).ready(function() {
            const data = @Json.Serialize(Model);

            // Line Chart
            const trendCtx = document.getElementById('trendChart').getContext('2d');
            const months = data.map(item =>
                new Date(item.year, item.month - 1).toLocaleDateString('en-US', {
                    month: 'short',
                    year: 'numeric'
                })
            ).reverse();

            new Chart(trendCtx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [{
                        label: 'Income',
                        data: data.map(item => item.totalIncome).reverse(),
                        borderColor: '#28a745',
                        fill: false
                    }, {
                        label: 'Expenses',
                        data: data.map(item => item.totalExpenses).reverse(),
                        borderColor: '#dc3545',
                        fill: false
                    }, {
                        label: 'Net Amount',
                        data: data.map(item => item.netAmount).reverse(),
                        borderColor: '#17a2b8',
                        fill: false
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Monthly Income vs Expenses Trend'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                callback: function(value) {
                                    return '$' + value.toLocaleString();
                                }
                            }
                        }
                    }
                }
            });

            // Pie Chart
            const pieCtx = document.getElementById('pieChart').getContext('2d');
            new Chart(pieCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Income', 'Expenses'],
                    datasets: [{
                        data: [totalIncome, totalExpenses],
                        backgroundColor: ['#28a745', '#dc3545']
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Income vs Expenses Distribution'
                        }
                    }
                }
            });

            // Time range selector
            $('#timeRangeSelect').change(function() {
                const months = $(this).val();
                window.location.href = `/Report/IncomeVsExpenses?months=${months}`;
            });
        });
    </script>
}
